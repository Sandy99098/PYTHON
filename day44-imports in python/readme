<!-- In Python, the import statement is used to bring external modules or packages into your current Python script or interactive session. It allows you to access functions, classes, variables, and other objects defined in those modules or packages. -->

<!-- Here's how the import statement works: -->

# Basic Import:
You can import an entire module or package using the import keyword followed by the name of the module or package. For example:
python

# 
import math
This imports the entire math module, allowing you to access functions like math.sqrt() and math.sin().
Module Alias: -->
<!-- <!-- You can use the as keyword to give a module or package a different alias. This is useful when you want to shorten long module names or avoid name conflicts. For example: -->
python

# 
import numpy as np
<!-- This imports the numpy module and gives it the alias np, so you can use np instead of numpy when accessing functions and classes from the numpy module.
Import Specific Objects:
You can import specific functions, classes, or variables from a module or package using the from ... import ... syntax. For example:
python -->

# 
from math import sqrt
<!-- This imports only the sqrt function from the math module, allowing you to use sqrt() directly without prefixing it with math..
Wildcard Import:
You can use the wildcard * to import all objects from a module or package. However, this is generally discouraged as it can lead to namespace pollution and make your code less readable. For example:
python -->

# 
from math import *
<!-- This imports all functions and variables from the math module, allowing you to use them directly without prefixing them with math.. However, it's better to explicitly import only the objects you need.
Importing from Subpackages:
If a module has subpackages, you can import objects from those subpackages using dot notation. For example:
python -->

# 
from package.subpackage import module
<!-- Importing Relative to Current Module:
You can import modules or packages relative to the current module using dot notation with leading dots (.) to indicate the relative path. For example:
python

#  -->
from . import module
<!-- This imports module from the same package as the current module. -->


